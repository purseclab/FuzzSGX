../test.c:34:26: warning: incompatible integer to pointer conversion initializing 'volatile unsigned int *' with an expression of type 'const int' [-Wint-conversion]
        volatile unsigned int * mmio8 = a;
                                ^       ~
../test.c:38:2: warning: implicit declaration of function 'acces' is invalid in C99 [-Wimplicit-function-declaration]
        acces(mmio10); 
        ^
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (pre inlining) ***
; Function Attrs: nounwind uwtable
define void @access(i32*) #0 {
  %2 = alloca i32*, align 8
  store i32* %0, i32** %2, align 8, !tbaa !2
  %3 = load i32*, i32** %2, align 8, !tbaa !2
  store volatile i32 0, i32* %3, align 4, !tbaa !6
  ret void
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @access(i32*) #0 {
  %2 = alloca i32*, align 8
  store i32* %0, i32** %2, align 8, !tbaa !2
  %3 = load i32*, i32** %2, align 8, !tbaa !2
  store volatile i32 0, i32* %3, align 4, !tbaa !6
  ret void
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define void @access(i32*) #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind uwtable
define void @access(i32*) #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Lower 'expect' Intrinsics ***
; Function Attrs: nounwind uwtable
define void @access(i32*) #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (pre inlining) ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  %11 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %12 = getelementptr inbounds i32, i32* %11, i64 8
  store volatile i32 9, i32* %12, align 4, !tbaa !2
  %13 = bitcast i32** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #3
  %14 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %15 = getelementptr inbounds i32, i32* %14, i64 3
  store i32* %15, i32** %2, align 8, !tbaa !6
  %16 = load i32*, i32** %2, align 8, !tbaa !6
  store volatile i32 1, i32* %16, align 4, !tbaa !2
  %17 = bitcast i32** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #3
  %18 = load i32*, i32** %2, align 8, !tbaa !6
  %19 = getelementptr inbounds i32, i32* %18, i64 1
  store i32* %19, i32** %3, align 8, !tbaa !6
  %20 = load i32*, i32** %3, align 8, !tbaa !6
  store volatile i32 2, i32* %20, align 4, !tbaa !2
  %21 = bitcast i32** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %21) #3
  %22 = load i32*, i32** %3, align 8, !tbaa !6
  %23 = getelementptr inbounds i32, i32* %22, i64 1
  store i32* %23, i32** %4, align 8, !tbaa !6
  %24 = load i32*, i32** %4, align 8, !tbaa !6
  store volatile i32 3, i32* %24, align 4, !tbaa !2
  %25 = bitcast i32** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #3
  %26 = load i32*, i32** %4, align 8, !tbaa !6
  %27 = getelementptr inbounds i32, i32* %26, i64 1
  store i32* %27, i32** %5, align 8, !tbaa !6
  %28 = bitcast i32** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #3
  %29 = load i32*, i32** %5, align 8, !tbaa !6
  %30 = getelementptr inbounds i32, i32* %29, i64 1
  store i32* %30, i32** %6, align 8, !tbaa !6
  %31 = bitcast i32** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %31) #3
  %32 = load i32*, i32** %6, align 8, !tbaa !6
  %33 = getelementptr inbounds i32, i32* %32, i64 1
  store i32* %33, i32** %7, align 8, !tbaa !6
  %34 = bitcast i32** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34) #3
  %35 = load i32*, i32** %7, align 8, !tbaa !6
  %36 = getelementptr inbounds i32, i32* %35, i64 -8
  store i32* %36, i32** %8, align 8, !tbaa !6
  %37 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %37) #3
  store i32 19, i32* %9, align 4, !tbaa !2
  %38 = bitcast i32** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %38) #3
  store i32* inttoptr (i64 19 to i32*), i32** %10, align 8, !tbaa !6
  %39 = load i32*, i32** %8, align 8, !tbaa !6
  %40 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %39)
  %41 = bitcast i32** %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %41) #3
  %42 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %42) #3
  %43 = bitcast i32** %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #3
  %44 = bitcast i32** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #3
  %45 = bitcast i32** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %45) #3
  %46 = bitcast i32** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %46) #3
  %47 = bitcast i32** %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %47) #3
  %48 = bitcast i32** %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %48) #3
  %49 = bitcast i32** %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %49) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  %11 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %12 = getelementptr inbounds i32, i32* %11, i64 8
  store volatile i32 9, i32* %12, align 4, !tbaa !2
  %13 = bitcast i32** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #3
  %14 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %15 = getelementptr inbounds i32, i32* %14, i64 3
  store i32* %15, i32** %2, align 8, !tbaa !6
  %16 = load i32*, i32** %2, align 8, !tbaa !6
  store volatile i32 1, i32* %16, align 4, !tbaa !2
  %17 = bitcast i32** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #3
  %18 = load i32*, i32** %2, align 8, !tbaa !6
  %19 = getelementptr inbounds i32, i32* %18, i64 1
  store i32* %19, i32** %3, align 8, !tbaa !6
  %20 = load i32*, i32** %3, align 8, !tbaa !6
  store volatile i32 2, i32* %20, align 4, !tbaa !2
  %21 = bitcast i32** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %21) #3
  %22 = load i32*, i32** %3, align 8, !tbaa !6
  %23 = getelementptr inbounds i32, i32* %22, i64 1
  store i32* %23, i32** %4, align 8, !tbaa !6
  %24 = load i32*, i32** %4, align 8, !tbaa !6
  store volatile i32 3, i32* %24, align 4, !tbaa !2
  %25 = bitcast i32** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #3
  %26 = load i32*, i32** %4, align 8, !tbaa !6
  %27 = getelementptr inbounds i32, i32* %26, i64 1
  store i32* %27, i32** %5, align 8, !tbaa !6
  %28 = bitcast i32** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #3
  %29 = load i32*, i32** %5, align 8, !tbaa !6
  %30 = getelementptr inbounds i32, i32* %29, i64 1
  store i32* %30, i32** %6, align 8, !tbaa !6
  %31 = bitcast i32** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %31) #3
  %32 = load i32*, i32** %6, align 8, !tbaa !6
  %33 = getelementptr inbounds i32, i32* %32, i64 1
  store i32* %33, i32** %7, align 8, !tbaa !6
  %34 = bitcast i32** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34) #3
  %35 = load i32*, i32** %7, align 8, !tbaa !6
  %36 = getelementptr inbounds i32, i32* %35, i64 -8
  store i32* %36, i32** %8, align 8, !tbaa !6
  %37 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %37) #3
  store i32 19, i32* %9, align 4, !tbaa !2
  %38 = bitcast i32** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %38) #3
  store i32* inttoptr (i64 19 to i32*), i32** %10, align 8, !tbaa !6
  %39 = load i32*, i32** %8, align 8, !tbaa !6
  %40 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %39)
  %41 = bitcast i32** %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %41) #3
  %42 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %42) #3
  %43 = bitcast i32** %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #3
  %44 = bitcast i32** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #3
  %45 = bitcast i32** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %45) #3
  %46 = bitcast i32** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %46) #3
  %47 = bitcast i32** %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %47) #3
  %48 = bitcast i32** %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %48) #3
  %49 = bitcast i32** %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %49) #3
  ret i32 0
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %3, i64 3
  store volatile i32 1, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %4, i64 1
  store volatile i32 2, i32* %5, align 4, !tbaa !2
  %6 = getelementptr inbounds i32, i32* %5, i64 1
  store volatile i32 3, i32* %6, align 4, !tbaa !2
  %7 = getelementptr inbounds i32, i32* %6, i64 1
  %8 = getelementptr inbounds i32, i32* %7, i64 1
  %9 = getelementptr inbounds i32, i32* %8, i64 1
  %10 = getelementptr inbounds i32, i32* %9, i64 -8
  %11 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %10)
  ret i32 0
}
*** IR Dump After Early CSE ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %3, i64 3
  store volatile i32 1, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %4, i64 1
  store volatile i32 2, i32* %5, align 4, !tbaa !2
  %6 = getelementptr inbounds i32, i32* %5, i64 1
  store volatile i32 3, i32* %6, align 4, !tbaa !2
  %7 = getelementptr inbounds i32, i32* %6, i64 1
  %8 = getelementptr inbounds i32, i32* %7, i64 1
  %9 = getelementptr inbounds i32, i32* %8, i64 1
  %10 = getelementptr inbounds i32, i32* %9, i64 -8
  %11 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %10)
  ret i32 0
}
*** IR Dump After Lower 'expect' Intrinsics ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %3, i64 3
  store volatile i32 1, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %4, i64 1
  store volatile i32 2, i32* %5, align 4, !tbaa !2
  %6 = getelementptr inbounds i32, i32* %5, i64 1
  store volatile i32 3, i32* %6, align 4, !tbaa !2
  %7 = getelementptr inbounds i32, i32* %6, i64 1
  %8 = getelementptr inbounds i32, i32* %7, i64 1
  %9 = getelementptr inbounds i32, i32* %8, i64 1
  %10 = getelementptr inbounds i32, i32* %9, i64 -8
  %11 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %10)
  ret i32 0
}
*** IR Dump After Force set function attributes ***; ModuleID = '../test.c'
source_filename = "../test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.a = type { i8, i32, i32 }

@mmio3 = global i32* inttoptr (i64 897897800 to i32*), align 8
@mmio_s = global %struct.a* inttoptr (i64 266412869 to %struct.a*), align 8

; Function Attrs: nounwind uwtable
define void @access(i32*) #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %3, i64 3
  store volatile i32 1, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %4, i64 1
  store volatile i32 2, i32* %5, align 4, !tbaa !2
  %6 = getelementptr inbounds i32, i32* %5, i64 1
  store volatile i32 3, i32* %6, align 4, !tbaa !2
  %7 = getelementptr inbounds i32, i32* %6, i64 1
  %8 = getelementptr inbounds i32, i32* %7, i64 1
  %9 = getelementptr inbounds i32, i32* %8, i64 1
  %10 = getelementptr inbounds i32, i32* %9, i64 -8
  %11 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %10)
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

declare i32 @acces(...) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
*** IR Dump After Infer set function attributes ***; ModuleID = '../test.c'
source_filename = "../test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.a = type { i8, i32, i32 }

@mmio3 = global i32* inttoptr (i64 897897800 to i32*), align 8
@mmio_s = global %struct.a* inttoptr (i64 266412869 to %struct.a*), align 8

; Function Attrs: nounwind uwtable
define void @access(i32*) #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %3, i64 3
  store volatile i32 1, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %4, i64 1
  store volatile i32 2, i32* %5, align 4, !tbaa !2
  %6 = getelementptr inbounds i32, i32* %5, i64 1
  store volatile i32 3, i32* %6, align 4, !tbaa !2
  %7 = getelementptr inbounds i32, i32* %6, i64 1
  %8 = getelementptr inbounds i32, i32* %7, i64 1
  %9 = getelementptr inbounds i32, i32* %8, i64 1
  %10 = getelementptr inbounds i32, i32* %9, i64 -8
  %11 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %10)
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

declare i32 @acces(...) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
*** IR Dump After Call-site splitting ***
; Function Attrs: nounwind uwtable
define void @access(i32*) #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Call-site splitting ***
; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %3, i64 3
  store volatile i32 1, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %4, i64 1
  store volatile i32 2, i32* %5, align 4, !tbaa !2
  %6 = getelementptr inbounds i32, i32* %5, i64 1
  store volatile i32 3, i32* %6, align 4, !tbaa !2
  %7 = getelementptr inbounds i32, i32* %6, i64 1
  %8 = getelementptr inbounds i32, i32* %7, i64 1
  %9 = getelementptr inbounds i32, i32* %8, i64 1
  %10 = getelementptr inbounds i32, i32* %9, i64 -8
  %11 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %10)
  ret i32 0
}
*** IR Dump After Interprocedural Sparse Conditional Constant Propagation ***; ModuleID = '../test.c'
source_filename = "../test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.a = type { i8, i32, i32 }

@mmio3 = global i32* inttoptr (i64 897897800 to i32*), align 8
@mmio_s = global %struct.a* inttoptr (i64 266412869 to %struct.a*), align 8

; Function Attrs: nounwind uwtable
define void @access(i32*) #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %3, i64 3
  store volatile i32 1, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %4, i64 1
  store volatile i32 2, i32* %5, align 4, !tbaa !2
  %6 = getelementptr inbounds i32, i32* %5, i64 1
  store volatile i32 3, i32* %6, align 4, !tbaa !2
  %7 = getelementptr inbounds i32, i32* %6, i64 1
  %8 = getelementptr inbounds i32, i32* %7, i64 1
  %9 = getelementptr inbounds i32, i32* %8, i64 1
  %10 = getelementptr inbounds i32, i32* %9, i64 -8
  %11 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %10)
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

declare i32 @acces(...) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
*** IR Dump After Called Value Propagation ***; ModuleID = '../test.c'
source_filename = "../test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.a = type { i8, i32, i32 }

@mmio3 = global i32* inttoptr (i64 897897800 to i32*), align 8
@mmio_s = global %struct.a* inttoptr (i64 266412869 to %struct.a*), align 8

; Function Attrs: nounwind uwtable
define void @access(i32*) #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %3, i64 3
  store volatile i32 1, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %4, i64 1
  store volatile i32 2, i32* %5, align 4, !tbaa !2
  %6 = getelementptr inbounds i32, i32* %5, i64 1
  store volatile i32 3, i32* %6, align 4, !tbaa !2
  %7 = getelementptr inbounds i32, i32* %6, i64 1
  %8 = getelementptr inbounds i32, i32* %7, i64 1
  %9 = getelementptr inbounds i32, i32* %8, i64 1
  %10 = getelementptr inbounds i32, i32* %9, i64 -8
  %11 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %10)
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

declare i32 @acces(...) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
*** IR Dump After Global Variable Optimizer ***; ModuleID = '../test.c'
source_filename = "../test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.a = type { i8, i32, i32 }

@mmio3 = local_unnamed_addr global i32* inttoptr (i64 897897800 to i32*), align 8
@mmio_s = local_unnamed_addr global %struct.a* inttoptr (i64 266412869 to %struct.a*), align 8

; Function Attrs: nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #0 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %3, i64 3
  store volatile i32 1, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %4, i64 1
  store volatile i32 2, i32* %5, align 4, !tbaa !2
  %6 = getelementptr inbounds i32, i32* %5, i64 1
  store volatile i32 3, i32* %6, align 4, !tbaa !2
  %7 = getelementptr inbounds i32, i32* %6, i64 1
  %8 = getelementptr inbounds i32, i32* %7, i64 1
  %9 = getelementptr inbounds i32, i32* %8, i64 1
  %10 = getelementptr inbounds i32, i32* %9, i64 -8
  %11 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %10)
  ret i32 0
}

declare i32 @acces(...) local_unnamed_addr #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
*** IR Dump After Promote Memory to Register ***
; Function Attrs: nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Promote Memory to Register ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #0 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %3, i64 3
  store volatile i32 1, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %4, i64 1
  store volatile i32 2, i32* %5, align 4, !tbaa !2
  %6 = getelementptr inbounds i32, i32* %5, i64 1
  store volatile i32 3, i32* %6, align 4, !tbaa !2
  %7 = getelementptr inbounds i32, i32* %6, i64 1
  %8 = getelementptr inbounds i32, i32* %7, i64 1
  %9 = getelementptr inbounds i32, i32* %8, i64 1
  %10 = getelementptr inbounds i32, i32* %9, i64 -8
  %11 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %10)
  ret i32 0
}
*** IR Dump After Dead Argument Elimination ***; ModuleID = '../test.c'
source_filename = "../test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.a = type { i8, i32, i32 }

@mmio3 = local_unnamed_addr global i32* inttoptr (i64 897897800 to i32*), align 8
@mmio_s = local_unnamed_addr global %struct.a* inttoptr (i64 266412869 to %struct.a*), align 8

; Function Attrs: nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #0 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %3, i64 3
  store volatile i32 1, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %4, i64 1
  store volatile i32 2, i32* %5, align 4, !tbaa !2
  %6 = getelementptr inbounds i32, i32* %5, i64 1
  store volatile i32 3, i32* %6, align 4, !tbaa !2
  %7 = getelementptr inbounds i32, i32* %6, i64 1
  %8 = getelementptr inbounds i32, i32* %7, i64 1
  %9 = getelementptr inbounds i32, i32* %8, i64 1
  %10 = getelementptr inbounds i32, i32* %9, i64 -8
  %11 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %10)
  ret i32 0
}

declare i32 @acces(...) local_unnamed_addr #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #0 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #2
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #0 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #2
  ret i32 0
}
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Function Integration/Inlining ***
; Function Attrs: nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Deduce function attributes ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Promote 'by reference' arguments to scalars ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After SROA ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Early CSE w/ MemorySSA ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Jump Threading ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Value Propagation ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Conditionally eliminate dead library calls ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After PGOMemOPSize ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Tail Call Elimination ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Reassociate expressions ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After MergedLoadStoreMotion ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Global Value Numbering ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After MemCpy Optimization ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Sparse Conditional Constant Propagation ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Bit-Tracking Dead Code Elimination ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Jump Threading ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Value Propagation ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Dead Store Elimination ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Aggressive Dead Code Elimination ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Remove unused exception handling info ***
Printing <null> Function
*** IR Dump After Function Integration/Inlining ***
Printing <null> Function
*** IR Dump After Deduce function attributes ***
Printing <null> Function
*** IR Dump After Promote 'by reference' arguments to scalars ***
Printing <null> Function
*** IR Dump After Remove unused exception handling info ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !2
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !6
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !6
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !6
  %6 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Function Integration/Inlining ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !2
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !6
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !6
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !6
  %6 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Deduce function attributes ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !2
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !6
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !6
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !6
  %6 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Promote 'by reference' arguments to scalars ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !2
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !6
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !6
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !6
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !6
  %6 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After SROA ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Early CSE w/ MemorySSA ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Conditionally eliminate dead library calls ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After PGOMemOPSize ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Tail Call Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Reassociate expressions ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After MergedLoadStoreMotion ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Global Value Numbering ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After MemCpy Optimization ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Bit-Tracking Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Jump Threading ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Value Propagation ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Dead Store Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Aggressive Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Remove unused exception handling info ***
Printing <null> Function
*** IR Dump After Function Integration/Inlining ***
Printing <null> Function
*** IR Dump After Deduce function attributes ***
Printing <null> Function
*** IR Dump After Promote 'by reference' arguments to scalars ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = '../test.c'
source_filename = "../test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.a = type { i8, i32, i32 }

@mmio3 = local_unnamed_addr global i32* inttoptr (i64 897897800 to i32*), align 8
@mmio_s = local_unnamed_addr global %struct.a* inttoptr (i64 266412869 to %struct.a*), align 8

; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}

declare i32 @acces(...) local_unnamed_addr #2

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
*** IR Dump After Eliminate Available Externally Globals ***; ModuleID = '../test.c'
source_filename = "../test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.a = type { i8, i32, i32 }

@mmio3 = local_unnamed_addr global i32* inttoptr (i64 897897800 to i32*), align 8
@mmio_s = local_unnamed_addr global %struct.a* inttoptr (i64 266412869 to %struct.a*), align 8

; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}

declare i32 @acces(...) local_unnamed_addr #2

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
*** IR Dump After Deduce function attributes in RPO ***; ModuleID = '../test.c'
source_filename = "../test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.a = type { i8, i32, i32 }

@mmio3 = local_unnamed_addr global i32* inttoptr (i64 897897800 to i32*), align 8
@mmio_s = local_unnamed_addr global %struct.a* inttoptr (i64 266412869 to %struct.a*), align 8

; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}

declare i32 @acces(...) local_unnamed_addr #2

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
*** IR Dump After Global Variable Optimizer ***; ModuleID = '../test.c'
source_filename = "../test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.a = type { i8, i32, i32 }

@mmio3 = local_unnamed_addr global i32* inttoptr (i64 897897800 to i32*), align 8
@mmio_s = local_unnamed_addr global %struct.a* inttoptr (i64 266412869 to %struct.a*), align 8

; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}

declare i32 @acces(...) local_unnamed_addr #2

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
*** IR Dump After Dead Global Elimination ***; ModuleID = '../test.c'
source_filename = "../test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.a = type { i8, i32, i32 }

@mmio3 = local_unnamed_addr global i32* inttoptr (i64 897897800 to i32*), align 8
@mmio_s = local_unnamed_addr global %struct.a* inttoptr (i64 266412869 to %struct.a*), align 8

; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}

declare i32 @acces(...) local_unnamed_addr #2

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
*** IR Dump After Float to int ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Loop Distribution ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Loop Vectorization ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Loop Load Elimination ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After SLP Vectorizer ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Alignment from assumptions ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Float to int ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Loop Distribution ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Loop Vectorization ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Loop Load Elimination ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Demanded bits analysis ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After SLP Vectorizer ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Alignment from assumptions ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Strip Unused Function Prototypes ***; ModuleID = '../test.c'
source_filename = "../test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.a = type { i8, i32, i32 }

@mmio3 = local_unnamed_addr global i32* inttoptr (i64 897897800 to i32*), align 8
@mmio_s = local_unnamed_addr global %struct.a* inttoptr (i64 266412869 to %struct.a*), align 8

; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}

declare i32 @acces(...) local_unnamed_addr #2

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
*** IR Dump After Dead Global Elimination ***; ModuleID = '../test.c'
source_filename = "../test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.a = type { i8, i32, i32 }

@mmio3 = local_unnamed_addr global i32* inttoptr (i64 897897800 to i32*), align 8
@mmio_s = local_unnamed_addr global %struct.a* inttoptr (i64 266412869 to %struct.a*), align 8

; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}

declare i32 @acces(...) local_unnamed_addr #2

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
*** IR Dump After Merge Duplicate Global Constants ***; ModuleID = '../test.c'
source_filename = "../test.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.a = type { i8, i32, i32 }

@mmio3 = local_unnamed_addr global i32* inttoptr (i64 897897800 to i32*), align 8
@mmio_s = local_unnamed_addr global %struct.a* inttoptr (i64 266412869 to %struct.a*), align 8

; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}

declare i32 @acces(...) local_unnamed_addr #2

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !4, i64 0}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Remove redundant instructions ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Hoist/decompose integer division and remainder ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: norecurse nounwind uwtable
define void @access(i32*) local_unnamed_addr #0 {
  store volatile i32 0, i32* %0, align 4, !tbaa !2
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After LCSSA Verifier ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Remove redundant instructions ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Hoist/decompose integer division and remainder ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
*** IR Dump After Simplify the CFG ***
; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #1 {
  %1 = load i32*, i32** @mmio3, align 8, !tbaa !6
  %2 = getelementptr inbounds i32, i32* %1, i64 8
  store volatile i32 9, i32* %2, align 4, !tbaa !2
  %3 = getelementptr inbounds i32, i32* %1, i64 3
  store volatile i32 1, i32* %3, align 4, !tbaa !2
  %4 = getelementptr inbounds i32, i32* %1, i64 4
  store volatile i32 2, i32* %4, align 4, !tbaa !2
  %5 = getelementptr inbounds i32, i32* %1, i64 5
  store volatile i32 3, i32* %5, align 4, !tbaa !2
  %6 = tail call i32 (i32*, ...) bitcast (i32 (...)* @acces to i32 (i32*, ...)*)(i32* %1) #3
  ret i32 0
}
2 warnings generated.
